<div class="example-container mat-elevation-z8">
    <div class="example-loading-shade"
         *ngIf="isLoadingResults || isRateLimitReached">
      <mat-spinner *ngIf="isLoadingResults"></mat-spinner>
      <div class="example-rate-limit-reached" *ngIf="isRateLimitReached">
        Please add some Contacts to view them.
      </div>
    </div>
  
    <div class="example-table-container">
  
      <table mat-table [dataSource]="data" class="example-table"
             matSort matSortActive="created" matSortDisableClear matSortDirection="desc">
        <!-- Number Column -->
        <ng-container matColumnDef="number">
          <th mat-header-cell *matHeaderCellDef>#</th>
          <td mat-cell *matCellDef="let row">{{row.number}}</td>
        </ng-container>
  
        <!-- Title Column -->
        <ng-container matColumnDef="title">
          <th mat-header-cell *matHeaderCellDef>Title</th>
          <td mat-cell *matCellDef="let row">{{row.title}}</td>
        </ng-container>
  
        <!-- State Column -->
        <ng-container matColumnDef="state">
          <th mat-header-cell *matHeaderCellDef>State</th>
          <td mat-cell *matCellDef="let row">{{row.state}}</td>
        </ng-container>
  
        <!-- Created Column -->
        <ng-container matColumnDef="created">
          <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>
            Created
          </th>
          <td mat-cell *matCellDef="let row">{{row.created_at}}</td>
        </ng-container>

        <ng-container matColumnDef="edit">
          <th mat-header-cell style="text-align: center" *matHeaderCellDef > 
            <mat-icon>edit</mat-icon>
          </th>
          <td mat-cell style="text-align: center" *matCellDef="let row" >
            <button mat-button >Edit</button>
          </td>
        </ng-container>

        <ng-container matColumnDef="delete">
          <th mat-header-cell style="text-align: center" *matHeaderCellDef >
            <mat-icon>delete</mat-icon>
          </th>
          <td mat-cell style="text-align: center" *matCellDef="let row" >
            <button (click)="onDelete(row)" mat-button >Delete</button>
          </td>
        </ng-container>
  
        <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
        <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
      </table>
    </div>
    <mat-paginator [length]="resultsLength" [pageSize]="20" aria-label="Select page of GitHub search results"></mat-paginator>
  </div>
  

  import { HttpClient } from '@angular/common/http';
import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort, SortDirection } from '@angular/material/sort';
import { catchError, map, merge, Observable, startWith, switchMap, of as observableOf } from 'rxjs';

@Component({
  selector: 'app-table-test',
  templateUrl: './table-test.component.html',
  styleUrls: ['./table-test.component.css']
})
export class TableTestComponent implements AfterViewInit {

  displayedColumns: string[] = ['created', 'state', 'number', 'title', 'edit', 'delete'];
  displyedContactColumns: string [] = ['Name', 'Phone Number', 'Email Address']; 
  exampleDatabase!: ExampleHttpDatabase | null;
  data: GithubIssue[] = [];
  dataSec: dbContacts[] = [];

  resultsLength = 0;
  isLoadingResults = true;
  isRateLimitReached = false;

  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  constructor(private _httpClient: HttpClient) {}

  ngAfterViewInit() {
    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient);
    // If the user changes the sort order, reset back to the first page.
    this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));

    merge(this.sort.sortChange, this.paginator.page)
      .pipe(
        startWith({}),
        switchMap(() => {
          this.isLoadingResults = true;
          return this.exampleDatabase!.getRepoIssues(
            this.sort.direction,
            this.paginator.pageIndex,
          ).pipe(catchError(() => observableOf(null)));
        }),
        map(data => {
          // Flip flag to show that loading has finished.
          // data = null;
          this.isLoadingResults = false;
          this.isRateLimitReached = data === null;

          if (data === null) {
            return [];
          }

          // Only refresh the result length if there is new data. In case of rate
          // limit errors, we do not want to reset the paginator to zero, as that
          // would prevent users from re-triggering requests.
          this.resultsLength = data.total_count;
          return data.items;
        }),
      )
      .subscribe(data => (this.data = data));
  }

  onDelete(row: any){
    console.log('Heueheuhe', row);
  }

  onUpdate(){
    this.paginator.pageIndex = 0;
    this.ngAfterViewInit();
  }
}

export interface GithubApi {
  items: GithubIssue[];
  total_count: number;
}

export interface GithubIssue {
  created_at: string;
  number: string;
  state: string;
  title: string;
}

export interface dbContacts {
  contact_id: number;
  name: string;
  phoneNumber: string;
  email: string
}

/** An example database that the data source uses to retrieve data for the table. */
export class ExampleHttpDatabase {
  constructor(private _httpClient: HttpClient) {}

  getRepoIssues(order: SortDirection, page: number): Observable<any> {
    const href = 'https://api.github.com/search/issues';
    const requestUrl = `${href}?q=repo:angular/components&sort=&order=${order}&page=${
      page + 1
    }`;

    console.log('Check Repo', requestUrl);

    return this._httpClient.get<any>(requestUrl);
  }

  getRepoIssuesSec(order: SortDirection, page: number): Observable<any> {
    const href = 'https://api.github.com/search/issues';
    const requestUrl = `${href}?q=repo:angular/components&sort=&order=${order}&page=${
      page + 1
    }`;

    console.log('Check Repo', requestUrl);

    return this._httpClient.get<any>(requestUrl);
  }
}